{"pages":[{"title":"About","date":"2021-03-31T01:15:08.940Z","path":"about/index.html","text":""},{"title":"Categories","date":"2021-03-31T01:15:08.940Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2021-03-31T01:15:08.940Z","path":"tags/index.html","text":""}],"posts":[{"title":"DP","date":"2019-09-30T15:00:00.000Z","path":"wiki/Video/DP/","text":"DPDisplayPort Interface Channels Main Link:Each main link comprises 1, 2 or 4 AC-coupled, doubly terminated differential pairs (lanes) with no dedicated clock signal, which is embedded in the 8b/10b coded data stream. AUX CH: Auxiliary Channel, 1 lane for Hot Plug Detect Features DisplayPort version 1.0 1.1-1.1a 1.2-1.2a 1.3 1.4 2.0 Hot-pluggable Yes Yes Yes Yes Yes Yes Inline audio Yes Yes Yes Yes Yes Yes DisplayPort content protection (DPCP) DPCP 1.0 DPCP 1.0 DPCP 1.0 DPCP 1.0 DPCP 1.0 DPCP 1.0 High-bandwidth digital content protection (HDCP) No HDCP 1.3 HDCP 1.3 HDCP 2.2 HDCP 2.2 HDCP 2.2 Dual-mode (DP++) No Yes Yes Yes Yes Yes Maximum DP++ bandwidth (TMDS Clock) N/A 4.95 Gbit/s (165 MHz) 9.00 Gbit/s (300 MHz) 18.00 Gbit/s (600 MHz) 18.00 Gbit/s (600 MHz) 18.00 Gbit/s (600 MHz) Stereoscopic 3D video No Yes Yes Yes Yes Yes Multi-stream transport (MST) No No Yes Yes Yes Yes High-dynamic-range video (HDR) No No No No Yes Yes Display stream compression (DSC) No No No No DSC 1.2 DSC 1.2a Panel replay No No No No No Yes DisplayPort dual-mode (DP++) Optional feature. Allows DisplayPort sources to use simple passive adapters to connect to HDMI or DVI displays. Devices which implement dual-mode will detect that a DVI or HDMI adapter is attached, and send DVI/HDMI TMDS signals instead of DisplayPort signals. DP++ V1.0, used in DP V1.1, TMDS clock speeds of up to 165 MHz (4.95 Gbit/s bandwidth). HDMI 1.2, 1920 x 1080, 1920 x 1200 60 Hz. DP++ v1.1, used in DP V1.2, TMDS clock speeds of up to 300 MHz (9.00 Gbit/s). This is slightly less than the 340 MHz maximum of HDMI 1.4, and is sufficient for up to 1920 × 1080 at 120 Hz, 2560 × 1440 at 60 Hz, or 3840 × 2160 at 30 Hz. DP++ v1.?, used in DP V1.3, TMDS clock speeds of up to 600 MHz (18.00 Gbit/s). The full bandwidth of HDMI 2.0. This is sufficient for 1920 × 1080 at 240 Hz, 2560 × 1440 at 144 Hz, or 3840 × 2160 at 60 Hz. Older adapters, which were only capable of the 165 MHz speed, were retroactively termed “Type 1” adapters, with the new 300 MHz adapters being called “Type 2”. Limitation Single-link DVI only. Unavailable on USB-C. Limited adapter speed. The signals are transmitted at DisplayPort’s native voltage (3.3 V) instead of the 5 V used by DVI and HDMI. Unidirectional. DVI or HDMI to DP need active conversion device. Multi-Stream Transport (MST)DP 1.2 and newer. It allows multiple independent displays to be driven from a single DP port on the source devices by multiplexing several video streams into a single stream and sending it to a branch device, which demultiplexes the signal into the original streams. MST hub. (For example: StarTech MSTDP124DP DisplayPort MST(multi-stream) hub) Supported by USB Type-C DisplayPort Alternate Mode, so standard DisplayPort daisy-chains and MST hubs do function from Type-C sources with a simple Type-C to DisplayPort adapter. DisplayPort-to-DVI and DisplayPort-to-HDMI adapters/cables may or may not function from an MST output port. Maximum 63 displays, the maximum number of links between the source and any device is 7, the maximum number of physical output ports on each branch device is 7. Daisy-chainDP monitor have dedicated DisplayPort output port. (For example: DELL U2417H) DisplayPort Alternate Mode over USB Type-C High dynamic range (HDR)Support for HDR video was introduced in DisplayPort 1.4. It implements the CTA 861.3 standard for transport of static HDR metadata in EDID. DisplayPort Content protection (DPCP)DP V1.1, HDCP 1.3. DisplayPort 1.3 added support for HDCP 2.2, which is also used by HDMI 2.0. Link Symbol Rate 1.1-1.1a 1.2-1.2a 1.3 1.4 2.0 Main link Transmission modes: RBR (1.62 Gbit/s per lane) Yes Yes Yes Yes Yes HBR (2.70 Gbit/s per lane) Yes Yes Yes Yes Yes HBR2 (5.40 Gbit/s per lane) No Yes Yes Yes Yes HBR3 (8.10 Gbit/s per lane) No No Yes Yes Yes UHBR 10 (10.0 Gbit/s per lane) No No No No Yes UHBR 13.5 (13.5 Gbit/s per lane) No No No No Yes UHBR 20 (20.0 Gbit/s per lane) No No No No Yes Number of lanes 4 4 4 4 4 Maximum total bandwidth[a] 10.80 Gbit/s 21.60 Gbit/s 32.40 Gbit/s 32.40 Gbit/s 80.00 Gbit/s Maximum total data rate[b] 8.64 Gbit/s 17.28 Gbit/s 25.92 Gbit/s 25.92 Gbit/s 77.37 Gbit/s Encoding scheme[c] (§1.7.1) 8b/10b 8b/10b 8b/10b 8b/10b 128b/132b Compression (optional) - - - DSC 1.2 (DP 1.4) DSC 1.2a (DP 1.4a) DSC 1.2a Resolution ##HDMI &amp; DVI vs DP 参考资料 DisplayPort 视频基本原理 -视频接口之 - DP接口 （二） Testing DisplayPort v1.2 at 5.4Gbps on PS3600","tags":[{"name":"DP","slug":"DP","permalink":"http://OHLIA.github.io/Wiki-site/tags/DP/"}],"categories":[{"name":"Video","slug":"Video","permalink":"http://OHLIA.github.io/Wiki-site/categories/Video/"}]},{"title":"Creating a Bootable DOS USB drive","date":"2019-09-10T16:10:30.000Z","path":"wiki/DOS/Creating-a-Bootable-DOS-USB-drive/","text":"BOOTICECreating a DOS bootable USB drive with BOOTICE. Bootice is free software. Not necessary to format USB drive. Format your media as FAT32. If it is FAT32 now, don’t need this step. Use BOOTICE to install/config MBR and PBR. Download the MS-DOS CD image from the following link: https://winworldpc.com/product/ms-dos/7x Open and uncompress 3 files: io.sys, msdos.sys, command.com form image directory .\\Microsoft DOS 7.1 (CD).7z\\Microsoft DOS 7.1 (CD)\\dos71cd.iso\\BOOT\\DOS71INS.IMG\\ to USB drive root directory by 7-ZIP. RufusCreating a DOS bootable USB drive with Rufus. Rufus is free software. Rufus will auto download FreeDOS boot files. Will format USB drive. UltraISOCreating a DOS bootable USB drive with Rufus. UltraISO is priced software. Will format USB drive. 参考资料 How to Install MS DOS 7.1 How to Create a Bootable DOS USB Drive","tags":[{"name":"DOS","slug":"DOS","permalink":"http://OHLIA.github.io/Wiki-site/tags/DOS/"},{"name":"Legacy","slug":"Legacy","permalink":"http://OHLIA.github.io/Wiki-site/tags/Legacy/"},{"name":"Shell","slug":"Shell","permalink":"http://OHLIA.github.io/Wiki-site/tags/Shell/"},{"name":"Boot","slug":"Boot","permalink":"http://OHLIA.github.io/Wiki-site/tags/Boot/"}],"categories":[{"name":"DOS","slug":"DOS","permalink":"http://OHLIA.github.io/Wiki-site/categories/DOS/"}]},{"title":"X86 电脑硬件架构","date":"2019-08-29T15:06:48.000Z","path":"wiki/Computer/structure-of-computer/","text":"Classical model 此图为比较经典的电脑架构图。实际架构根据不同的厂商，主板，平台有所差别。 北桥（North Bridge）：北桥芯片位于 CPU 插座边，起连接作用，用来处理高速信号，例如中央处理器、存储器、显卡（PCI Express 接口或AGP接口），还有与南桥之间的通信。目前已被集成到 CPU 。 南桥（South Bridge）：南桥芯片用于处理低速信号，通过北桥与中央处理器联系。在 旧 Intel 平台中由 ICH 担当。当前 Intel 的 PCH 可看作是南桥。部分 SoC 将 PCH 也集成到 CPU。 SIO （Super I/O）: 一种 I/O 芯片，通过 LPC 总线连接到南桥。集成了 PS/2 键盘、PS/2 鼠标、串口 COM、并口 LPT 接口等处理功能。 SATA（Serial Advanced Technology Attachment）：是一种基于行业标准的串行硬件驱动器接口，是由Intel、IBM、Dell、APT、Maxtor 和 Seagate 公司共同提出的硬盘接口规范。 SPI (Serial Peripheral Interface): 一种高速，全双工，同步通信总线，在芯片的管脚上只占用四根线，节约了芯片的管脚，同时为PCB的布局上节省空间，提供方便，正是出于这种简单易用的特性，如今越来越多的芯片集成了这种通信协议，比如AT91RM9200。以主从方式工作，通常有一个主设备和一个或多个从设备，需至少4根线，（3根也可，用于单向传输时，也就是半双工方式），它们是 SDI（数据输入）、SDO（数据输出）、SCLK（时钟）、CS（片选）。 BIOS (Basic input output system) : 是一组固化到主板 ROM 芯片的程序，可从 CMOS 中读写系统设置的具体信息，负责提供最底层，最直接的硬件设置和控制功能。 PCH PCH 全称为 Platform Controller Hub，是 Intel 产品的集成南桥。 北桥的内存控制器和 PCIe 控制器都集成到了 CPU 内部，相当于北桥芯片集成到 CPU 内，主板上只剩下南桥。所以PCH可以理解成南桥。目前 Intel 的有些 SOC 连 PCH 也集成到CPU内，比如：Intel Xeon D系列. PCH 具有原来 ICH （I/O controller hub） 的全部功能，也具有 MCH (Memory control hub) 的管理引擎功能。 ICH 负责连接PCI总线、IDE设备、I/O设备等，是 INTEL 的南桥芯片系列名称。 MCH 相当于北桥芯片，负责连接CPU、AGP总线和 Memory. DMI (直接媒体接口): 用于连接 CPU 和 PCH 的总线，DMI 2.0 单通道单向传输速率 5GT/s，x4 link 2 GB/s；DMI 3.0 单通道单向传输速率 8GT/s， x4 link 3.93 GB/s。 SMBus (System Management Bus): PCH提供 SMBus 主机控制器以及 SMBus 接口，主机控制器为处理器提供机制以启动与 SMBus 外围设备的通信。 参考资料 X86 架构 PCH简单介绍 计算机基础知识-X86架构 一文看懂arm架构和x86架构有什么区别 Serial_Peripheral_Interface","tags":[{"name":"Computer","slug":"Computer","permalink":"http://OHLIA.github.io/Wiki-site/tags/Computer/"}],"categories":[{"name":"Computer","slug":"Computer","permalink":"http://OHLIA.github.io/Wiki-site/categories/Computer/"}]},{"title":"Install Driver on Windows","date":"2019-08-29T11:38:23.000Z","path":"wiki/Windows/install-driver-on-windows/","text":"双击可执行文件CMD 下静默安装在 Windows CMD 通过类似 setup.exe -s 命令在后台安装，具体查看相关驱动的文档。 Windows update Windows update 推送，比如 Graphic Driver； 点击 自动搜索更新的驱动程序软件 ； 通过 .inf[^1] 文件安装 右键点选安装;以 PASSMARK USB 3.0 Loopback 为例： 手动添加安装;以并口打印机为例： 参考资料[^1]: INF是Device INFormation File的英文缩写，是Microsoft公司为硬件设备制造商发布其驱动程序推出的一种文件格式，INF文件中包含硬件设备的信息或脚本以控制硬件操作。在INF文件中指明了硬件驱动该如何安装到系统中，源文件在哪里、安装到哪一个文件夹中、怎样在注册表中加入自身相关信息等等。","tags":[{"name":"Windows","slug":"Windows","permalink":"http://OHLIA.github.io/Wiki-site/tags/Windows/"},{"name":"Driver","slug":"Driver","permalink":"http://OHLIA.github.io/Wiki-site/tags/Driver/"}],"categories":[{"name":"Windows","slug":"Windows","permalink":"http://OHLIA.github.io/Wiki-site/categories/Windows/"}]},{"title":"PCIe","date":"2019-08-28T20:01:58.000Z","path":"wiki/Interface/PCIe/","text":"Revision Coding Date Rate x1 x4 x16 1.0 8b/10b 2.5 GT/s 250 MB/s 1 GB/s 4 GB/s 2.0 8b/10b 5 GT/s 500 MB/s 2 GB/s 8 GB/s 3.0 128b/130b 8 GT/s 984.6 MB/s 3.94 GB/s 15.75 GB/s 4.0 128b/130b 16 GT/s 1696 MB/s 7.88 GB/s 31.51 GB/s 5.0 128b/130b 32 GT/s 3938 MB/s 15.75 GB/s 126.03 GB/s BandwidthPCIe 2.0 support 5 GT/s, every lane support transmit 5G bit, but don’t means the transmission rate is 5Gbps for every lane.Because the encode scheme is 8b/10b, means transmit 8 bit data need send 10 bit.So PCIe 2.0 every lane actual rate is 5 x 8 / 10 = 4 Gbps = 500 MB/s .PCIe 3.0 1 lane, 8 x 128 /130 = 7.88 Gbps = 984.6 MB/s. InterfacePCIe x 16, 89 mm, 164 pin PCIe x 8, 56 mm, 76 pin PCIe x 4, 39 mm, PCIe x 1, 25 mm, 14 pin 参考资料 PCI-E总线带宽 PCI Express 超能课堂(113) 那些长短不一的PCI-E插槽都有什么不一样？","tags":[{"name":"PCIe","slug":"PCIe","permalink":"http://OHLIA.github.io/Wiki-site/tags/PCIe/"}],"categories":[{"name":"Interface","slug":"Interface","permalink":"http://OHLIA.github.io/Wiki-site/categories/Interface/"}]},{"title":"USB","date":"2019-08-28T18:54:39.000Z","path":"wiki/Interface/USB/","text":"Universal Serial Bus Revision Data rate Speed Coding Actual Speed Max. Cable Length Release USB 1.0 1.5 Mbps 12 Mbit/s 192 KB/s 8b/10b 1996 USB 1.1 12 Mbit/s 1536 KB/s 8b/10b 5 M 1998 USB 2.0 480 Mbit/s 60 MB/s 8b/10b 48 MB/s 5 M 2001 USB 3.0USB 3.1 Gen 1USB 3.2 Gen1 5 Gbit/s 625MB/s 8b/10b 500 MB/s 5 M 2011 USB 3.1 Gen 2USB 3.2 Gen 2 10 Gbit/s 1250 MB/s 128b/132b ~ 1212 MB/s 2014 USB 3.2USB 3.2 Gen 2 x 2 20 Gbit/s 2560 MB/s 2017 USB 4 40 Gbit/s 5120 MB/s 2019 USB 3.1 Gen2 Encode scheme: 128b/132b, line encode overhead: 3% ; If Support USB Power Delivery 1.0/2.0, Max power: 20 V x 5 A = 100 W ; Add Type-C connector; Connectors PowerUSB power standards Specification Current Voltage Power (max.) Low-power device 100 mA 5 V[a] 0.50 W Low-power SuperSpeed (USB 3.0) device 150 mA 5 V[a] 0.75 W High-power device 500 mA[b] 5 V 2.5 W High-power SuperSpeed (USB 3.0) device 900 mA[c] 5 V 4.5 W Multi-lane SuperSpeed (USB 3.2 Gen 2) device 1.5 A[d] 5 V 7.5 W Battery Charging (BC) 1.2 1.5 A 5 V 7.5 W USB-C 1.5 A 5 V 7.5 W 3 A 5 V 15 W Power Delivery 2.0 Micro-USB 3 A 20 V 60 W Power Delivery 2.0 Type-A/B/C[e] 5 A 20 V 100 W ^ Jump up to:a b The VBUS supply from a low-powered hub port may drop to 4.40 V.^ Up to five unit loads; with non-SuperSpeed devices, one unit load is 100 mA.^ Up to six unit loads; with SuperSpeed devices, one unit load is 150 mA.^ Up to six unit loads; with multi-lane devices, one unit load is 250 mA.^ Requires active PD 5 A cable. Power-related specifications Release name Release date Max. power Note USB Battery Charging 1.0 2007-03-08 5 V, ? A USB Battery Charging 1.1 2009-04-15 5 V, 1.8 A [41] USB Battery Charging 1.2 2010-12-07 5 V, 5 A [42] USB Power Delivery revision 1.0 (version 1.0) 2012-07-05 20 V, 5 A Using FSK protocol over bus power (VBUS) USB Power Delivery revision 1.0 (version 1.3) 2014-03-11 ? USB Power Delivery revision 2.0 (version 1.0) 2014-08-11 20 V, 5 A Using BMC protocol over communication channel (CC) on USB-C cables. USB-C 2.0 2014-08-11 5 V, 3 A New connector and cable specification USB-C 4.2 2015-04-03 5 V, 3 A USB Power Delivery revision 2.0 (version 1.1) 2015-05-07 20 V, 5 A USB Power Delivery revision 2.0 (version 1.2) 2016-03-25 20 V, 5 A USB Power Delivery revision 2.0 (version 1.3) 2017-01-12 20 V, 5 A USB Power Delivery revision 3.0 (version 1.1) 2017-01-12 20 V, 5 A USB Power Delivery revision 3.0 (version 1.2) 2018-06-21 20 V, 5 A [43] 参考资料 USB3.1最新技术及测试方案 USB (Universal Serial Bus) Tutorial USB","tags":[{"name":"USB","slug":"USB","permalink":"http://OHLIA.github.io/Wiki-site/tags/USB/"}],"categories":[{"name":"Interface","slug":"Interface","permalink":"http://OHLIA.github.io/Wiki-site/categories/Interface/"}]},{"title":"Intel Ethernet Network Adapter Flash Tool eeupdate","date":"2019-08-28T15:38:23.000Z","path":"wiki/Network/Intel-Ethernet-Network-Adapter-Flash-Tool-eeupdate/","text":"eeupdate123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192Using: Intel (R) PRO Network Connections SDK v2.30.25EEUPDATE v5.30.25.06 Copyright (C) 1995 - 2017 Intel CorporationIntel (R) Confidential and not for general distribution.-----------------------------------------------------Options: /HELP or /? Displays command line help. /EXITCODES Displays exit code help. /ALL Selects all adapters found in the system. /NIC=XX Selects a specific adapter (1-32). /BUS=XX Selects PCI bus of adapter to program. Must be used with the DEV parameter to specify an adapter. /DEV=XX Selects PCI device of the adapter to program. Must be used with the BUS parameter to specify an adapter. /FUN=XX Selects PCI function of the adapter to program. Must be used with both the BUS and DEV parameters to specify an adapter.Press &lt;Enter&gt; to continue... /DEVICE=&lt;pci device ID&gt; 4 hex digit device id of card to program. /SUBDEVICE=&lt;pci subsystem device ID&gt; 4 hex digit subsystem device id of card to program. /DUMP Dumps EEPROM/Shadow RAM memory contents to file *.eep and flash memory to *.bin (if available) /MAC_DUMP_FILE Dumps the MAC address to a file usable by the /A command. /MAC_DUMP Displays the adapter LAN MAC address. /MAC_DUMP_ALL Displays all the MAC addresses. /MAC_ALL_TO_FILE Dumps all the MAC addresses to a file usable by the /MAC_ALL_FROM_FILE command. /MAC_ALL_FROM_FILE &lt;addrfile&gt; Programs all MAC addresses from text file to a device. File should contain 13 MAC addresses (9 for PEPs and 4 custom MAC addresses), one each line. EUI48 and EUI64 formats accepted. /CB &lt;offset&gt; &lt;bitmask&gt; Clears bits in the EEPROM, specified in &lt;bitmask&gt;. /SB &lt;offset&gt; &lt;bitmask&gt; Sets bits in the EEPROM, specified in &lt;bitmask&gt;.Press &lt;Enter&gt; to continue... /RW &lt;word&gt; Reads &lt;word&gt; from the EEPROM. /WW &lt;word&gt; &lt;value&gt; Writes &lt;value&gt; into &lt;word&gt; in EEPROM. /MAC=macaddr [/NUM=PF_num] Programs the EEPROM/NVM with only the MAC address of macaddr without changing the rest of the EEPROM/NVM. /NUM is optional and I40E specific - it defines target PF. /A &lt;addrfile&gt; or /address &lt;addrfile&gt; Programs the EEPROM/NVM with only the MAC address from the &lt;addrfile&gt; without changing the rest of the EEPROM. /D &lt;imagefile&gt; or /DATA &lt;imagefile&gt; Programs the NVM [EEPROM/FLASH] with the contents of &lt;imagefile&gt; without changing the MAC address. /PHYNVM &lt;imagefile&gt; Programs the PHY NVM with the contents of &lt;imagefile&gt; /DEBUG Forces debug update to be used where applicable. Must be used with /D or /DATA switch. /CALCCHKSUM Forces the EEPROM checksum and CRCs to be updated.Press &lt;Enter&gt; to continue... /EEPROMVER Displays the version of the EEPROM image. /INVMVERSION Displays the version of the iNVM image. /PCIINFO Displays the PCI information of the adapter. /ADAPTERINFO Displays additional information about the adapter, such as EtrackID, PF MAC address, or image and firmware version. /TEST Checks the EEPROM/NVM checksum(s) and size. /IDFLASH Displays the flash ID and its protected status. /VERSION Displays version and the diagnostic library information. /PHYID &lt;imagefile&gt; Programs the PHY ID NVM with the contents of &lt;imagefile&gt;. /PHYID_DUMP Dumps PHY ID NVM contents to a file with the name: &lt;PHY ID&gt;_&lt;PHY card version&gt;.bin /PHYID_VERIFY &lt;targetfile&gt; Verifies the PHY ID NVM image in eeprom against the file specified in &lt;targetfile&gt;.Press &lt;Enter&gt; to continue... /FLASH_DUMP &lt;targetfile&gt; Dumps contents of the whole flash memory of selected adapters to *.bin file /EEPROM_DUMP Dumps contents of the EEPROM/Shadow RAM memory of selected adapters to *.eep file /GUI Brings up GUI mode. /GUI /HELP Displays GUI help. /NOPROT When programming an image for devices that support NVM protection, prevents protection from being enabled. This switch must be used with the /DATA command and has no effect on NVM devices that are already protected. /DEBUGLOG &lt;debugfile&gt; Log debug messages into the debugfile. /VERIFY &lt;targetfile&gt; Verifies the eeprom/NVM image in eeprom/NVM to the target file specified in &lt;targetfile&gt;.Press &lt;Enter&gt; to continue... /CHECKIMAGE Verifies that the NVM in &lt;imagefile&gt; can be loaded over the running NVM. /VERIFYPHYNVM &lt;targetfile&gt; Verifies the PHY NVM image in eeprom to the target file specified in &lt;targetfile&gt;. /ADAPTERRESET Reset the adapter. *CAUTION* This will unload the driver for this device if present. /SANMAC_DUMP [/NUM=PF_num] Displays the dedicated MAC address for the SAN. /NUM is optional and i40e specific - it defines target PF. /SANMAC=macaddr [/NUM=PF_num] Programs the dedicated SAN MAC address withoutchanging the rest of the EEPROM. /NUM is optional and i40e specific - it defines target PF. /SANADDRESS &lt;addrfile&gt; Programs the dedicated SAN MAC address with the MAC address from &lt;addrfile&gt;. /INVMVERIFY /FILE=&lt;[path\\]filename&gt;] Compares autoload configuration stored in OTP memory with the configuration defined in configuration file. /INVMTEST /FILE=&lt;[path\\]filename&gt;] Report number of free space left in INVM if autoload configuration defined in configuration file would be applied.Press &lt;Enter&gt; to continue... /INVMUPDATE /FILE=&lt;[path\\]filename&gt;] Write new autoload configuration defined in Raw (*.raw) configuration file to empty INVM or updates current autoload configuration stored in INVM based on &apos;human readable&apos; configuration file. /INVMISLOCKED Checks if autoload configuration stored in OTP memory is protected against write attempts. /INVMLOCK Sets unique record in autoload configuration stored in INVM protecting its content against further updates. /INVMGET Dumps autoload configuration stored in INVM to file with predefined name &lt;mac address hex string&gt;.otp. /FORCE Omits any warnings and forces command execution. /KEEPCONFIG This option lets you keep config words while upgrading eeprom. /PORT_MAC=macaddr /NUM=Port_num Programs the dedicated Port MAC address without changing the rest of the EEPROM. /PORT_MAC_DUMP /NUM=Port_num Display the adapter port MAC address.Press &lt;Enter&gt; to continue... /CUSTOM_MAC mac_number mac_addr Programs the given custom mac address number [0-3] without changing the rest of the NVM (EUI48 and EUI64 formats supported). /SERIAL_MAC=macaddr Programs the dedicated PCIe serial MAC address without changing the rest of the EEPROM. /SERIAL_MAC_DUMP Display the adapter PCIe serial MAC address. /PF_MAC=macaddr /NUM=PF_num Programs the dedicated MAC address of a specified Physical Function This allows altering the mac addresses of inactive functions of a visible NIC. /PF_MAC_DUMP /NUM=PF_num Display MAC address of a selected Physical Function of the specified NIC. This allows dumping MAC addresses of inactive functions of a visible device. /MNG_MAC=macaddr /NUM=MNG_num Programs the dedicated MAC address of a specified Manageability Function This allows altering the mac addresses of inactive functions of a visible NIC. /MNG_MAC_DUMP /NUM=MNG_num Display MAC address of a selected Manageability Function of the specified NIC. This allows dumping MAC addresses of inactive functions of a visible device. /RO &lt;imagefile&gt; Programs RO words in EEPROM/SR with values taken from RO Module binary file. MAC addressIf flash BIOS by Intel FPT tool not as fpt -f xxx.bin -savemac. The MAC address for Intel I219 adapter will be missing, and mark as 88-88-88-88-87-88 . Users can use eeupdate to flash the MAC address during DOS/EFI Shell/Windows environment. Command as eeupdate /nic=x /mac=xxxxxx. If the Computer don’t have Intel adapter, it will prompt others message. 参考资料 Network Connections Tools - Intel Design in Tools Ethernet controller I210 I211","tags":[{"name":"Intel","slug":"Intel","permalink":"http://OHLIA.github.io/Wiki-site/tags/Intel/"},{"name":"Flash","slug":"Flash","permalink":"http://OHLIA.github.io/Wiki-site/tags/Flash/"},{"name":"Tool","slug":"Tool","permalink":"http://OHLIA.github.io/Wiki-site/tags/Tool/"}],"categories":[{"name":"Network","slug":"Network","permalink":"http://OHLIA.github.io/Wiki-site/categories/Network/"}]},{"title":"Creating a Bootable USB drive with UEFI Shell","date":"2019-08-28T09:28:47.000Z","path":"wiki/EFI/Creating-a-Bootable-USB-drive-with-UEFI-Shell/","text":"Format your media as FAT32 Create the following directory structure in the root of the new media /efi/boot Download the UEFI Shell (Shell.efi) from the following link For 64bit BIOS: https://github.com/tianocore/edk2/blob/UDK2018/ShellBinPkg/UefiShell/X64/Shell.efi Others BIOS: https://github.com/tianocore/edk2/tree/UDK2018/ShellBinPkg/UefiShell Rename the UEFI shell file to Bootx64.efi 32bit : Bootia32.efi Copy the UEFI shell (now Bootx64.efi) to the /efi/boot directory 参考资料 Creating a Bootable USB drive with UEFI Shell","tags":[{"name":"Shell","slug":"Shell","permalink":"http://OHLIA.github.io/Wiki-site/tags/Shell/"},{"name":"Boot","slug":"Boot","permalink":"http://OHLIA.github.io/Wiki-site/tags/Boot/"},{"name":"EFI","slug":"EFI","permalink":"http://OHLIA.github.io/Wiki-site/tags/EFI/"},{"name":"UEFI","slug":"UEFI","permalink":"http://OHLIA.github.io/Wiki-site/tags/UEFI/"}],"categories":[{"name":"EFI","slug":"EFI","permalink":"http://OHLIA.github.io/Wiki-site/categories/EFI/"}]},{"title":"Windows 电源状态","date":"2019-08-27T23:09:24.000Z","path":"wiki/Windows/windows-acpi-state/","text":"Power states Global states Name Sleep states Description G0 Working S0 The computer is running and the CPU executes instructions. G1 Sleeping S0ix Modern Standby; Some SoC systems support a low-power idle state known as Modern Standby. In this state, the system can very quickly switch from a low-power state to high-power state, so that it can respond quickly to hardware and network events. Systems that support Modern Standby do not use S1-S3. S1 Power on Suspend (POS): Processor caches are flushed, and the CPU(s) stops executing instructions. The power to the CPU(s) and RAM is maintained. Devices that do not indicate they must remain on may be powered off S2 CPU powered off. Dirty cache is flushed to RAM S3 Named Sleep on Windows; Suspend to RAM (STR): RAM remains powered. S4 Named Hibernation on Windows; Suspend to Disk: All content of the main memory is saved to non-volatile memory such as a hard drive, and the system is powered down G2 Soft off S5 The Computer is powered down, but the power supply unit still supplies power. No previous content is retained. Some components may remain powered, then computer can be “wake” on input from the keyboard, mouse, clock, LAN, modem or USB devices. G3 Mechanical off The computer’s power has been totally removed via a mechanical switch (as on the rear of a PSU). The power cord can be removed and the system is safe for disassembly. Typically, only the real-time clockcontinues to run using its own small battery. 参考资料 Windows电源状态 Advanced Configuration and Power Interface","tags":[{"name":"ACPI","slug":"ACPI","permalink":"http://OHLIA.github.io/Wiki-site/tags/ACPI/"},{"name":"Windows","slug":"Windows","permalink":"http://OHLIA.github.io/Wiki-site/tags/Windows/"}],"categories":[{"name":"Windows","slug":"Windows","permalink":"http://OHLIA.github.io/Wiki-site/categories/Windows/"}]},{"title":"Test TPM module on Linux","date":"2019-08-27T21:57:38.000Z","path":"wiki/Linux/test-tpm-module-on-linux/","text":"1234567891011121314151617181920212223242526#Test on Ubuntu 18.04#Updatesudo apt updatesudo apt upgrade#Make sure kernel version is 4.12 or higheruname -r#Install TPM2 toolssudo apt install *tpm2*#Install python2sudo apt install pythonsudo apt install python-pippip install -U pytestpip install -U pytest-htmlpip install -U pytest-rerunfailures#Download TPM2 test scriptssudo apt install gitgit clone https://github.com/jsakkine-intel/tpm2-scripts#Download tpm2_smoke.py from: https://github.com/jsakkine-intel/tpm2-scripts/tree/4398af02a90442a85751148aebf725992a2949f3#Run testsudo python -m pytest -v tpm2_smoke.py Reference material tpm2-scripts","tags":[{"name":"TPM","slug":"TPM","permalink":"http://OHLIA.github.io/Wiki-site/tags/TPM/"},{"name":"Linux","slug":"Linux","permalink":"http://OHLIA.github.io/Wiki-site/tags/Linux/"}],"categories":[{"name":"Linux","slug":"Linux","permalink":"http://OHLIA.github.io/Wiki-site/categories/Linux/"}]},{"title":"通过 CMD 制作 Windows Legacy 启动设备","date":"2019-08-26T23:37:02.000Z","path":"wiki/Windows/make-windows-boot-devices-for-legacy-mode-by-cmd/","text":"创建主分区，激活主分区，使之可启动。 12345678910diskpartlist disk #列出所有存储设备select disk x #选择设备 xclean #清除该设备所有磁盘信息convert mbr #转换为 mbr 磁盘格式create partition primary size=4096 #创建主分区.分区大小4096M,如不加此参数则使用全盘空间.list partitionselect partition 1active #激活主分区format quick fs=fat32 #快速格式化当前分区,确认格式化为FAT32. 解压复制 Windows ISO 所有文件到存储设备的根目录。","tags":[{"name":"Boot","slug":"Boot","permalink":"http://OHLIA.github.io/Wiki-site/tags/Boot/"},{"name":"Windows","slug":"Windows","permalink":"http://OHLIA.github.io/Wiki-site/tags/Windows/"}],"categories":[{"name":"Windows","slug":"Windows","permalink":"http://OHLIA.github.io/Wiki-site/categories/Windows/"}]},{"title":"通过 Project pages 搭建个人的 Wiki 和 Blog","date":"2019-08-25T23:11:33.000Z","path":"wiki/Hexo/build-personal-wiki-and-blog-site-by-project-pages/","text":"Github pages 的分类当前 Github pages 可以创建以下两种站点： User and Organization pages sites（个人和组织页面站点） Project pages sites（项目页面站点） 个人和组织页面站点 Hexo 站点通常用到这种 Github pages 。 网页文件需要放到项目的 master 分支。 访问站点链接：http(s)://&lt;username&gt;.github.io http(s)://&lt;orgname&gt;.github.io 项目页面站点网页文件需要放到项目的特定分支或者路径： master 分支 gh-pages 分支 master 分支的 docs 目录下 站点链接：http(s)://&lt;username&gt;.github.io/&lt;projectname&gt;http(s)://&lt;orgname&gt;.github.io/&lt;projectname&gt; 搭建个人 Blog + Wiki 站点当前自己的方式是，个人页面站点使用 Next 主题写博客，项目页面站点使用 Wikitten 主题写 Wiki 。 创建项目 创建 &lt;username&gt;.github.io 项目，设置 hexo 分支为默认分支用以存放 Next 主题的 hexo 配置文件，设置 master 分支存放 Next 主题的 Hexo 站点内容。 创建 Wiki-site 项目，设置 writing 分支为默认分支用以存放 Wikitten 主题的 Hexo 站点的配置文件，设置 gh-pages 分支存放 Wikitten 主题的 Hexo 站点内容 站点配置Wikitten 站点为了正确访问站点内容，需修改 Wikitten 主题 Hexo 站点配置文件 _config.yml : 123456# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://&lt;username&gt;.github.io/Wiki-siteroot: /Wiki-sitepermalink: wiki/:title/permalink_defaults: 在顶栏菜单添加链接跳转回博客页面，需修改 Wikitten 主题的配置文件 _config.yml ： 12345678# Menusmenu: 首页: / 归档: /archives 分类: /categories 标签: /tags 关于: /about Blog: https://&lt;username&gt;.github.io Next 站点在顶栏菜单添加链接跳转至 Wiki 页面，需修改 Next 主题的配置文件 _config.yml ： 12345678910menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive schedule: /schedule/ || calendar sitemap: /sitemap.xml || sitemap commonweal: /404/ || heartbeat WIKI: /Wiki-site/ || wikipedia-w 以上完成后，其余步骤参考搭建 Hexo 站点相关教程即可。 参考资料 User, Organization, and Project Pages","tags":[{"name":"Github","slug":"Github","permalink":"http://OHLIA.github.io/Wiki-site/tags/Github/"},{"name":"Hexo","slug":"Hexo","permalink":"http://OHLIA.github.io/Wiki-site/tags/Hexo/"},{"name":"Html","slug":"Html","permalink":"http://OHLIA.github.io/Wiki-site/tags/Html/"},{"name":"Wiki","slug":"Wiki","permalink":"http://OHLIA.github.io/Wiki-site/tags/Wiki/"}],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://OHLIA.github.io/Wiki-site/categories/Hexo/"}]},{"title":"通过 hexo-theme-Wikitten 配置个人 Wiki","date":"2019-08-23T17:59:44.000Z","path":"wiki/Hexo/config-personal-wiki-by-hexo-theme-Wikitten/","text":"安装说明安装注意：本主题需要 Hexo v3.6 及以上版本。 进入你的 hexo 站点文件夹，克隆 Wikitten 主题到 themes/ 路径下 12$ cd your-hexo-directory$ git clone https://github.com/zthxxx/hexo-theme-Wikitten.git themes/Wikitten 覆盖站点目录中一些默认页面模板 12$ cp -rf themes/Wikitten/_source/* source/$ cp -rf themes/Wikitten/_scaffolds/* scaffolds/ 重命名主题中的 _config.yml.example 到 _config.yml，然后可以使用配置文件配置主题 123$ cp -f themes/Wikitten/_config.yml.example themes/Wikitten/_config.yml# 编辑配置文件，定制你的配置项$ vim themes/Wikitten/_config.yml 大部分的配置项都和 icarus 主题中的配置项一样，你可以首先去阅读一下 icraus 的文档。 一些你可以开箱即用的推荐配置见下面的文档：#Configuration 需要安装的插件写在主题的 package.json 文件中 这里列出了这些插件的功能作用： 12345hexo-autonofollow // 打开非本站链接时自动开启新标签页hexo-directory-category // 根据文章文件目录自动为文章添加分类hexo-generator-feed // 生成 RSS 源hexo-generator-json-content // 生成全站文章 json 内容，用于全文搜索hexo-generator-sitemap // 生成全站站点地图 sitemap 你可以将这些插件合并到站点的 package.json 文件中通过 npm install 一次安装， 或者在站点目录下，你可以通过以下命令安装他们： 1$ npm i -S hexo-autonofollow hexo-directory-category hexo-generator-feed hexo-generator-json-content hexo-generator-sitemap 配置mathjax渲染（可选）： 如果你在博客中需要撰写数学公式，推荐进行以下配置： 首先安装pandoc，同时在hexo站点下修改渲染引擎： 12$ npm un hexo-renderer-marked --save$ npm i hexo-rendere-pandoc --save # or hexo-renderer-krammed 然后将以下配置加到站点_config.yml文件中： 123math: enable: true engine: mathjax 启用修改站点 _config.yml 文件中的 theme 选项为 Wikitten。 更新12$ cd themes/Wikitten$ git pull origin master 配置说明站点配置在站点配置文件 _config.yml 中， 开箱即用配置为： 复制并修改 &lt;&gt; 标记的内容即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: &lt;title&gt;subtitle:description:keywords:author: &lt;author&gt;language: entimezone:# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://yoursite.comroot: /permalink: wiki/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render: - README.md - '_posts/**/embed_page/**'# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: ## Markdown## https://github.com/hexojs/hexo-renderer-markedmarked: gfm: true## Plugins: https://hexo.io/plugins/### JsonContentjsonContent: meta: false pages: title: true date: true path: true text: true posts: title: true date: true path: true text: true tags: true categories: true ignore: - 404.html ### Creat sitemapsitemap: path: sitemap.xml### Adds nofollow attribute to all external links in your hexo blog posts automatically.nofollow: enable: true exclude: - &lt;your site url domain&gt; # eg: zthxxx.me ## https://github.com/zthxxx/hexo-directory-category auto_dir_categorize: enable: true # options:true, false; default is true force: true # options:true, false; default is false # Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: '' per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: wikitten# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: 主题配置在主题配置文件 Wikitten/_config.yml 中，你能阅读到各个选项更多的细节配置。 在开始之前，首先请将主题配置文件示例中「我」的信息修改为「你」自己的信息，其中包括 profile social_links history_control等配置项。 profile、comment、Share 和 miscellaneous 项都是 默认关闭的！ （你任然可以打开那些选项，只是不推荐这样做。） 开箱即用推荐设置为： 只需修改用 &lt;&gt; 标记的内容。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293# Menusmenu: 首页: / 归档: /archives 分类: /categories 标签: /tags 关于: /about# Customizecustomize: logo: enabled: true width: 40 height: 40 url: /logo.png profile: enabled: false # Whether to show profile bar avatar: # css/images/avatar.png gravatar: zth_9451@qq.com # Gravatar email address, if you enable Gravatar, your avatar config will be overriden author: &lt;author&gt; author_title: &lt;Designer &amp; Programmer&gt; location: &lt;Chengdu, China&gt; follow: &lt;https://github.com/username/&gt; highlight: monokai sidebar: left # sidebar position, options: left, right category_perExpand: false # enable article categories list per expanding thumbnail: true # enable posts thumbnail, options: true, false favicon: /favicon.ico # path to favicon default_index_file: index.md # if this, it will display at site index instead of default index page social_links: github: &lt;https://github.com/username/username.github.io&gt; #stack-overflow: &lt;http://stackoverflow.com/users/7277090/zthxxx?tab=profile&gt; #codepen: http://codepen.io/zthxxx/ rss: /atom.xml social_link_tooltip: true # enable the social link tooltip, options: true, false# Widgetswidgets: # default use category only - category # - recent_posts # - archive # - tag # - tagcloud # - links # Excerpt ## Auto creat excerpt with not &lt;!--more--&gt;## Enable will truncate auto_excerpt.lines rows in post head to replace excerpt.auto_excerpt: enable: true lines: 5# Searchsearch: insight: true # you need to install `hexo-generator-json-content` before using Insight Search swiftype: # enter swiftype install key here baidu: false # you need to disable other search engines to use Baidu search, options: true, false# History version history_control: # make you wiki has history version control in page enable: true #启用这一项使得 wiki 能有历史版本的功能（查看源码、在线编辑、对比历史变动） server_link: https://github.com # recommend use GitHub https://github.com user: &lt;your GitHub name&gt; repertory: &lt;your repertory name of this wiki source code&gt; branch: &lt;branch name of this wiki site source code&gt;# Commentcomment: disqus: # enter disqus shortname here duoshuo: # enter duoshuo shortname here youyan: # enter youyan uid here# Shareshare: default # options: jiathis, bdshare, addtoany, default# Pluginsplugins: lightgallery: true # options: true, false justifiedgallery: true # options: true, false mathjax: true # options: true, false - to enable use Mathjax in your article google_analytics: # enter the tracking ID for your Google Analytics google_site_verification: # enter Google site verification code baidu_analytics: # enter Baidu Analytics hash key busuanzi_count: true # options: true, false - to enable busuanzi site pv statistics# Miscellaneousmiscellaneous: open_graph: # see http://ogp.me fb_app_id: fb_admins: twitter_id: google_plus: links: 参考hexo-theme-Wikitten 中文文档","tags":[{"name":"Note","slug":"Note","permalink":"http://OHLIA.github.io/Wiki-site/tags/Note/"},{"name":"Hexo","slug":"Hexo","permalink":"http://OHLIA.github.io/Wiki-site/tags/Hexo/"},{"name":"Wiki","slug":"Wiki","permalink":"http://OHLIA.github.io/Wiki-site/tags/Wiki/"}],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://OHLIA.github.io/Wiki-site/categories/Hexo/"}]},{"title":"Git 命令记录","date":"2019-08-22T23:39:50.000Z","path":"wiki/Git/git-command-note/","text":"基本用法下载 Github 项目 1git clone &lt;Github-repository-URL&gt; 分支查看远程分支 1git branch -a 查看本地分支 1git branch 添加新分支 1git checkout -b &lt;branch-name&gt; 切换分支 12345#切换本地分支git checkout &lt;branch-name&gt;#切换远程分支，切换远程的 new 分支到本地，本地分支名称叫 newgit checkout -b new origin/new 版本还原至某个版本 123git reset --hard &lt;commit-number&gt;#版本 commit 号可用 git log 命令查看。#不加 commit 号，默认还原至上一个版本。 技巧单独删除某个文件的所有历史记录 删除相应文件或者文件夹 执行前请先备份相应的文件或者文件夹。 PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA 更改为要删除的文件或文件夹。 此处删除文件夹，故需要在前面添加 -r 参数。 12345$ git filter-branch --force --index-filter \\ \"git rm --cached --ignore-unmatch -r PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA\" \\ --prune-empty --tag-name-filter cat -- --all &gt; Rewrite 48dc599c80e20527ed902928085e7861e6b3cbe6 (266/266) &gt; Ref 'refs/heads/master' was rewritten 本地记录覆盖到 Github 仓库（所有 Branch 以及 tags）。 12345678$ git push origin --force --all&gt; Counting objects: 1074, done.&gt; Delta compression using 2 threads.&gt; Compressing objects: 100% (677/677), done.&gt; Writing objects: 100% (1058/1058), 148.85 KiB, done.&gt; Total 1058 (delta 590), reused 602 (delta 378)&gt; To https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git&gt; + 48dc599...051452f master -&gt; master (forced update) 12345678$ git push origin --force --tags&gt; Counting objects: 321, done.&gt; Delta compression using up to 8 threads.&gt; Compressing objects: 100% (166/166), done.&gt; Writing objects: 100% (321/321), 331.74 KiB | 0 bytes/s, done.&gt; Total 321 (delta 124), reused 269 (delta 108)&gt; To https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git&gt; + 48dc599...051452f master -&gt; master (forced update) 确认远程仓库所有相关记录清除后，强制解除对本地存储库中的所有对象的引用和垃圾收集。 12345678$ git for-each-ref --format=\"delete %(refname)\" refs/original | git update-ref --stdin$ git reflog expire --expire=now --all$ git gc --prune=now&gt; Counting objects: 2437, done.&gt; Delta compression using up to 4 threads.&gt; Compressing objects: 100% (1378/1378), done.&gt; Writing objects: 100% (2437/2437), done.&gt; Total 2437 (delta 1461), reused 1802 (delta 1048) 删除 Git 服务器文件但是保留本地文件 .gitignore 添加要过滤的文件和文件夹 执行命令 1234git rm -r --cached .git add .git commitgit push -u origin &lt;branch-name&gt; 参考git命令总结记录 删除Git服务器文件但是保留本地文件 Github: 单独删除某个文件的所有历史记录 Removing sensitive data from a repository","tags":[{"name":"Note","slug":"Note","permalink":"http://OHLIA.github.io/Wiki-site/tags/Note/"},{"name":"Github","slug":"Github","permalink":"http://OHLIA.github.io/Wiki-site/tags/Github/"},{"name":"Git","slug":"Git","permalink":"http://OHLIA.github.io/Wiki-site/tags/Git/"}],"categories":[{"name":"Git","slug":"Git","permalink":"http://OHLIA.github.io/Wiki-site/categories/Git/"}]},{"title":"Github 分支备份 Hexo 配置","date":"2019-08-22T08:33:35.000Z","path":"wiki/Hexo/github-branch-hexo-config-backup/","text":"创建 Github 仓库创建仓库 Your-username.github.io 。 创建分支 Hexo ，此分支用于存放配置文件。 设置默认分支为 Hexo 。 Github pages 需把网页文件放到 master 分支。 本地设置进入本地 Hexo 文件夹，绑定远程仓库 1git remote add origin git@github.com:Your-username.github.io.git 如果提示错误，则手动生成 .git 文件夹 1git init 编辑.gitignore文件，设置不上传的文件和文件夹。 1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ 推送推送文件到 Github 远程仓库 12345git add .git commit -m “hexo source post”git push origin hexo 之后运行上面的命令行即可上传 Hexo 相关配置文件到 Github 仓库的默认 Hexo 分支，而 Hexo 生成的网页文件通过 hexo deploy 上传到 master 分支。","tags":[{"name":"Github","slug":"Github","permalink":"http://OHLIA.github.io/Wiki-site/tags/Github/"},{"name":"Hexo","slug":"Hexo","permalink":"http://OHLIA.github.io/Wiki-site/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"http://OHLIA.github.io/Wiki-site/tags/Blog/"},{"name":"branch","slug":"branch","permalink":"http://OHLIA.github.io/Wiki-site/tags/branch/"}],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://OHLIA.github.io/Wiki-site/categories/Hexo/"}]},{"title":"给 Hexo Blog 插入图片","date":"2019-08-21T18:59:05.000Z","path":"wiki/Hexo/insert-image-to-hexo-blog/","text":"当前个人推荐 Hexo 文章资源文件夹 加插件 hexo-asset-image@0.0.2 的方式，可以在 Typora 等 Markdown 编辑器下显示图片，方便阅读和编辑。 图床1![alt](https://xxx.jpg &quot;This is Pic&quot;) Hexo 文章资源文件夹开启特性，站点配置文件 _config.yml : 1post_asset_folder: true Hexo 生成文章文件的同时会生成同名目录： 1hexo new post &quot;测试文章&quot; 12345678测试文章.md测试图片-0.jpg测试文章/+-- 测试图片-1.png+-- 测试图片-2.png+-- 子目录/| +-- 测试图片-3.png| +-- 测试图片-4.png 安装插件 12345678#任选其一npm i --save hexo-asset-link#代码块如果写入 html,CSS 代码会出现问题。--20190821npm i --save hexo-asset-image@0.0.2#升级其他版本会出现生成链接错误的问题，0.0.3 到 1.0.0都有。--20190821#支持文章根目录和同名目录，不支持文章同名目录下的子目录。--20190821 编辑文章的图片写法 12345678910111213141516#hexo-asset-image:![](./测试图片-0.jpg) #跟文章同一目录下![](测试图片-1.png) #文章同名目录下，推荐用法![](./测试文章/子目录/测试图片-3.png) #失败![](测试文章/子目录/测试图片-4.png) #失败&lt;img src=\"./测试图片-0.jpg\" /&gt;&lt;img src=\"测试文章/测试图片-1.png\" /&gt;&lt;img src=\"./测试文章/测试图片-1.png\" /&gt;&lt;img src=\"./测试文章/子目录/测试图片-3.png\" /&gt; #失败&lt;img src=\"测试文章/子目录/测试图片-3.png\" /&gt; #失败#hexo-asset-link:![](测试图片-1.png)![](./测试图片-2.png)![](子目录/测试图片-3.png)![](./子目录/测试图片-4.png) 参考资源文件夹 如何为-Hexo-博文加入图片","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://OHLIA.github.io/Wiki-site/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"http://OHLIA.github.io/Wiki-site/tags/Blog/"}],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://OHLIA.github.io/Wiki-site/categories/Hexo/"}]},{"title":"给 Hexo 文章加密","date":"2019-08-20T00:05:33.000Z","path":"wiki/Hexo/encrypt-hexo-post/","text":"安装 Hexo-blog-encrypt 插件 修改 _config.yml , 123456789101112131415161718# Securityencrypt: enable: true # 开启为true，关闭为false default_abstract: 这是篇受保护的文章！#默认文章描述，可选 default_message: 请输入文章密码！#默认密码输入提示，可选 default_template: &lt;script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"&gt;&lt;/script&gt; &lt;div id=\"security\"&gt; &lt;div class=\"input-container\"&gt; &lt;input type=\"password\" class=\"form-control\" id=\"pass\" placeholder=\" &#123;&#123;message&#125;&#125; \" /&gt; &lt;label for=\"pass\"&gt; &#123;&#123;message&#125;&#125; &lt;/label&gt; &lt;div class=\"bottom-line\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=\"encrypt-blog\" style=\"display:none\"&gt; &#123;&#123;content&#125;&#125; &lt;/div&gt; #默认的文章详情页密码输入提示框，可选 ​ default_template ，这个是指在文章详情页，我们看到的输入密码阅读的模板，同理，这个也是针对所有文章的。​ 最后的 content 显示 div 的 id 必须 是 encrypt-blog同时为了好看，也希望进行隐藏。​ 必须要有一个 input 输入框，id 必须是&quot;pass&quot;，用来供用户输入密码。​ 输入密码之后，务必要有一个触发器，用来调用decryptAES 函数。样例中以 button 来触发。 针对某篇文章加密 在Front-Matter添加password: 密码即可。 或者如下： 12345678910111213141516171819202122---title: hello worlddate: tags: - tags1 - tags2password: password #此项必需，下面信息为可选abstract: 这是篇受保护的文章！message: 请输入文章密码！template: &lt;script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"&gt;&lt;/script&gt; &lt;div id=\"security\"&gt; &lt;div class=\"input-container\"&gt; &lt;input type=\"password\" class=\"form-control\" id=\"pass\" placeholder=\" &#123;&#123;message&#125;&#125; \" /&gt; &lt;label for=\"pass\"&gt; &#123;&#123;message&#125;&#125; &lt;/label&gt; &lt;div class=\"bottom-line\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=\"encrypt-blog\" style=\"display:none\"&gt; &#123;&#123;content&#125;&#125; &lt;/div&gt;--- 其他 跟 aplayer 或者 dplayer 插件有冲突。文章如果需要加密，无法使用以上两款播放器。–-20190821","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://OHLIA.github.io/Wiki-site/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"http://OHLIA.github.io/Wiki-site/tags/Blog/"}],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://OHLIA.github.io/Wiki-site/categories/Hexo/"}]},{"title":"使用 Typore 编辑 Markdown 文档","date":"2019-08-11T14:20:30.000Z","path":"wiki/Markdown/typora-edit-markdown-document/","text":"Typora 一些进阶用法。 进阶快捷键 标题：ctrl + 数字 表格：ctrl + t 生成目录：[TOC] 选中一整行：ctrl + l 选中单词：ctrl + d 选中相同格式的文字：ctrl + e 跳转到文章开头：ctrl + home 跳转到文章结尾：ctrl + end 搜索：ctrl + f 替换：ctrl + h 下划线：ctrl + u 删除线：alt + shift + 5 插入链接：ctrl + k 空格全角与半角 1234567891011半角空格&amp;ensp;&amp;#8194;全角空格&amp;emsp;&amp;#8195;不断行的空格&amp;nbsp;&amp;#160; 示例： 正常文本半角&ensp;空&#8194;格全角&emsp;空&#8195;格&emsp;&#8195;全角空格 换行软换行：Shift + Enter硬换行：空格 + 空格 + Shift + Enter换段：Enter 换行符：Windows: CR + LF, \\r\\n; Unix: CR, \\r CR 表示回车，回到一行的开头，LF 表示换行，另起一行。 Windows 的换行符本质是「回车 + 换行」，而 Unix 的是「回车」。 可在 Typora 设置切换。 emoji :emoji: 形式 示例：:heart::horse::man::girl::heart::horse::man::girl: 复制 emoji 符号 可从此网站复制 http://emojihomepage.com/ 示例：😺😸😹😻😼😽🙀😿😾🐈🤾 输入法联想 会复制成图片形式 转义字符123456789101112\\\\ 反斜杠\\` 反引号\\* 星号\\_ 下划线\\&#123;\\&#125; 大括号\\[\\] 中括号\\(\\) 小括号\\# 井号\\+ 加号\\- 减号\\. 英文句号\\! 感叹号 文本属性123456789101112131415&lt;font face=\"黑体\"&gt;黑体字&lt;/font&gt;&lt;font face=\"STCAIYUN\"&gt;我是华文彩云&lt;/font&gt;&lt;font size=3&gt; 字号3 &lt;/font&gt; # 文本尺寸值：1-7&lt;font color=red&gt; 红色字体 &lt;/font&gt;&lt;font color=#8E236B&gt; RGB 色号 #8E236B &lt;/font&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=orange&gt; 背景色是：orange &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;font face=\"黑体\" size=12 color=#90EE90&gt; 浅绿色黑体12字号 &lt;/font&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=orange&gt;&lt;font face=\"黑体\" size=6 color=#90EE90&gt;浅绿色黑体尺寸6，背景色是：orange&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;ruby&gt;上标&lt;rt&gt;shang biao&lt;/rt&gt;&lt;/ruby&gt; 示例： 黑体字我是华文彩云字体尺寸3 字体尺寸7 红色字体 RGB 色号 #8E236B 背景色是：orange 浅绿色黑体尺寸6，背景色是：orange 上标shang biao 插入图片 Markdown 写法 1234![标题，可略](链接)![](./pic.jpg) #相对路径，此表示 MD 文档所在根目录![](D:\\pic\\pic.jpg) #绝对路径![](httsp://xxx.xxx.com/xx/xx.jpg) #网络链接 html 写法 12&lt;img src= \"\" alt=\"\" /&gt; #最简&lt;img src= \"\" width=“” height=“” title=\"\" alt=\"\" /&gt; #设定长宽，图片名 可用 base64 插入小于 50K 的小图片。 分页符1&lt;div STYLE=\"page-break-after: always;\"&gt;&lt;/div&gt; 可用于导出 PDF 使用。 更改主题背景色偏好设置-打开主题文件夹 用文本编辑器打开对应主题的 .css文件 找到以下代码： 123456789101112131415html &#123; font-size: 16px; background-color: #fdf6e3;&#125;body &#123; font-family: Source Sans Pro, Helvetica Neue, Arial, sans-serif !important; color: #34495e; -webkit-font-smoothing: antialiased; line-height: 1.6rem; letter-spacing: 0; margin: 0; overflow-x: hidden; background-color: #fdf6e3;&#125; html 及 body 段都有 background-color: #fdf6e3;，前者可实现导出 html 时候背景色，后者可实现在 Typora 中显示背景色，可自行修改 RGB 色号。 PS: 导出 PDF 仍然无法实现背景色，待解决。 HTML 标签http://support.typora.io/HTML/ CSS 主题存放位置：偏好设置-主题-打开主题文件夹 获取主题：http://theme.typora.io/ 参考 RGB颜色参考 Typora 完全使用详解 从一无所知到卓有成效的Markdown–里程 Typora导出pdf时页面背景颜色的bug和解决方法 Markdown玩转Emoj Typora快捷键","tags":[{"name":"Note","slug":"Note","permalink":"http://OHLIA.github.io/Wiki-site/tags/Note/"},{"name":"Typora","slug":"Typora","permalink":"http://OHLIA.github.io/Wiki-site/tags/Typora/"},{"name":"Markdown","slug":"Markdown","permalink":"http://OHLIA.github.io/Wiki-site/tags/Markdown/"}],"categories":[{"name":"Markdown","slug":"Markdown","permalink":"http://OHLIA.github.io/Wiki-site/categories/Markdown/"}]},{"title":"配置多个 GIT 账号","date":"2019-08-09T23:15:00.000Z","path":"wiki/Git/config-multi-git-account/","text":"配置多个 GIT 账号生成 SSH 公钥生成第二以及后面多个 sshkey 123456789101112131415161718192021$ ssh-keygen -t rsa -C \"test@test.com\"Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/xxx/.ssh/id_rsa): /c/Users/xxx/.ssh/id_rsa_coding #此处需要手动输入路径及公钥文件名，比如加上 coding，以表示用于 coding.netEnter passphrase (empty for no passphrase): #可缺省Enter same passphrase again: #可缺省Your identification has been saved in /c/Users/xxx/.ssh/id_rsa_coding.Your public key has been saved in /c/Users/xxx/.ssh/id_rsa_coding.pub. #公钥文件The key fingerprint is:SHA256:zAj36q123456/123456h6g8XReRdbQPLA4Psz123456 xxxxx@xxxxx.comThe key's randomart image is:+---[RSA 2048]----+| || o o+..oo|| || o.= o o .. || || o*=E = + . || || ... =.o || |+----[SHA256]-----+ 查看公钥内容： 1$ cat ~/.ssh/id_rsa_coding.pub 复制到 GITHUB 或者 Coding.net 中： GitHub粘贴到 https://github.com/settings/sshCoding粘贴到 https://dev.tencent.com/user/account/setting/keys config 文件在存放公钥目录下生成 config 文件，填入以下内容 12345678910111213# git account oneHost github# Host git serverHostname github.comUser test IdentityFile ~/.ssh/id_rsa# git account twoHost coding# Host git serverHostname git.coding.netUser test IdentityFile ~/.ssh/id_rsa_coding 测试 SSH keys 密钥根据 config 文件，输入命令 12ssh -T git@github #域名换成设置的别名ssh -T git@coding 出现如下提示即可。","tags":[{"name":"GITHUB","slug":"GITHUB","permalink":"http://OHLIA.github.io/Wiki-site/tags/GITHUB/"}],"categories":[{"name":"Git","slug":"Git","permalink":"http://OHLIA.github.io/Wiki-site/categories/Git/"}]},{"title":"Android 架构","date":"2019-07-29T15:06:48.000Z","path":"wiki/Android/Android架构/","text":"四层架构","tags":[{"name":"Android","slug":"Android","permalink":"http://OHLIA.github.io/Wiki-site/tags/Android/"}],"categories":[{"name":"Android","slug":"Android","permalink":"http://OHLIA.github.io/Wiki-site/categories/Android/"}]},{"title":"M.2","date":"2019-05-25T19:00:59.000Z","path":"wiki/Interface/M.2/","text":"For StorageStorage interfacesLegacy SATA PCI Express using AHCI PCI Express using NVMe B Key: SATA, PCI-E x2 M Key: SATA, PCI-E x2, x4 For Wireless &amp; Bluetooth###Interface PCI-E x1 USB Keys and Sockets Key ID Pin Location Interface A 8-15 2x PCIe x1 / USB 2.0 / I2C / DP x4 B 12-19 PCIe x2 / SATA /USB 2.0 / USB 3.0 / HSIC / SSIC / Audio / UIM / I2C C 16-23 Reserved for Future Use D 20-27 Reserved for Future Use E 24-31 2x PCIe x1 / USB 2.0 / I2C / SDIO / UART / PCM F 28-35 Future Memory Interface (FMI) G 39-46 Not Used for M.2; for Custom/Non-Standard Apps H 43-50 Reserved for Future Use J 47-54 Reserved for Future Use K 51-58 Reserved for Future Use L 55-62 Reserved for Future Use M 59-66 PCIe x4 / SATA Size2230, 2242, 2280, 22 x 80 x3.58 mm 22110 参考资料 “M.2 SSDs: Big Performance Comes in Small Packages”","tags":[{"name":"M.2","slug":"M-2","permalink":"http://OHLIA.github.io/Wiki-site/tags/M-2/"}],"categories":[{"name":"Interface","slug":"Interface","permalink":"http://OHLIA.github.io/Wiki-site/categories/Interface/"}]},{"title":"DVI","date":"2019-04-15T22:01:13.000Z","path":"wiki/Video/DVI/","text":"Digital Visual Interface Interface ResolutionDVI-I Single Link max resolution: 1920x1200, 60Hz DVI-I Dual Link max resolution: 2560x1600, 60Hz/1920x1200, 120Hz DVI-D Single Link max resolution: 1920x1200, 60Hz DVI-D Dual Link max resolution: 2560x1600, 60Hz or 1920x1080, 120Hz BitrateSingle link: 3.96 Gbit/sDual link: 7.92 Gbit/s Cable lengthThe maximum length recommended for DVI cables is not included in the specification. In general, cable lengths up to 4.5 meters will work for display resolutions up to 1920 × 1200. Longer cables up to 15 meters in length can be used with display resolutions 1280 × 1024 or lower. Characteristic1、数字信号，避免了模/数转换过程，信号没有衰减，色彩更纯净、逼真。 2、Don’t support transmit audio. 3、Support HDCP.","tags":[{"name":"DVI","slug":"DVI","permalink":"http://OHLIA.github.io/Wiki-site/tags/DVI/"}],"categories":[{"name":"Video","slug":"Video","permalink":"http://OHLIA.github.io/Wiki-site/categories/Video/"}]},{"title":"Ubuntu 18.04 开启 S4 休眠功能","date":"2018-06-23T19:00:49.000Z","path":"wiki/Linux/ubuntu-18.04-hibernate/","text":"获取参数 修改配置文件 1234567891011121314151617181920212223242526272829303132333435363738394041#使用root权限##step1$ cat /sys/power/state#确认返回值有 disk##step2$ grep swap /etc/fstab$ grep UUID /etc/fstab#记录 UUID，如 UUID=0b3e8d9b-a63e-4bdd-8f47-8a9a764fe7ed##step3$ filefrag -v /swapfile#记录内存值#如下记录中的 ext:0 length:34816###############################ext: logical_offset: physical_offset: length: expected: flags: 0: 0.. 32767: 34816.. 67583: 32768: 1: 32768.. 63487: 67584.. 98303: 30720: 2: 63488.. 96255: 100352.. 133119: 32768: 98304: 3: 96256.. 126975: 133120.. 163839: 30720: #################################step4$ gedit /etc/default/grub#编辑 grub,填入记录的 UUID 和 length 数值：###############################GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash resume=UUID=09e601cd-5bac-491a-9115-fda1b2eb4664 resume_offset=34816\"#################################step5$ update-grub##step6$ reboot##step7$ rtcwake -m disk -s 60 #进入S4，60秒后自启$ systemctl hibernate #直接进入S4###form https://askubuntu.com/questions/1053134/hibernation-in-18-04#1053227","tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://OHLIA.github.io/Wiki-site/tags/Ubuntu/"},{"name":"教程","slug":"教程","permalink":"http://OHLIA.github.io/Wiki-site/tags/教程/"},{"name":"ACPI","slug":"ACPI","permalink":"http://OHLIA.github.io/Wiki-site/tags/ACPI/"},{"name":"Hibernate","slug":"Hibernate","permalink":"http://OHLIA.github.io/Wiki-site/tags/Hibernate/"}],"categories":[{"name":"Linux","slug":"Linux","permalink":"http://OHLIA.github.io/Wiki-site/categories/Linux/"}]},{"title":"Ubuntu 18.04 开启 root 账户登录","date":"2018-06-16T19:00:49.000Z","path":"wiki/Linux/ubuntu-18.04-root/","text":"设置root密码 更改配置文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051##step1#设置root密码$ sudo passwd root##step2#更改权限$ sudo chmod 777 /etc/pam.d/gdm-autologin$ sudo chmod 777 /etc/pam.d/gdm-password#开启root自动输入密码登陆#注释对应语句,文件第三行$ gedit /etc/pam.d/gdm-autologin----------------#auth require pam_succeed_if.so user !=root quiet_success----------------$ gedit /etc/pam.d/gdm-password----------------#auth required pam_succeed_if.so user !=root quiet_success----------------#更改权限$ sudo chmod 644 /etc/pam.d/gdm-autologin$ sudo chmod 644 /etc/pam.d/gdm-password##step3#设置自动登陆功能,修改对应语句$ sudo chmod 777 /etc/gdm3/custom.conf$ gedit /etc/gdm3/constom.conf-----------------------[daemon]AutomaticLoginEnable=trueAutomaticLogin=root-----------------------##step4#重启，查看是否成功##step5#提示错误：Prompt Error found:$ gedit /root/.profile#用#注释mesg n这句#尾行添加------------------------------------------------------tty -s &amp;&amp; mesg n # change’mesg n’ to‘tty –s &amp;&amp; mesg n’------------------------------------------------------##step6##出现提示错误：Audio no function$ gedit /root/.profile##############添加pulseaudio --start --log-target=syslog#############","tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://OHLIA.github.io/Wiki-site/tags/Ubuntu/"},{"name":"root","slug":"root","permalink":"http://OHLIA.github.io/Wiki-site/tags/root/"},{"name":"教程","slug":"教程","permalink":"http://OHLIA.github.io/Wiki-site/tags/教程/"}],"categories":[{"name":"Linux","slug":"Linux","permalink":"http://OHLIA.github.io/Wiki-site/categories/Linux/"}]},{"title":"备份恢复 Windows 10 开始菜单","date":"2018-05-01T18:30:49.000Z","path":"wiki/Windows/windows-10-start-menu-backup/","text":"WIN+R, 输入 powershell，运行 Powershell 。 备份到指定目录 1Export-startlayout –path d:\\documents\\start\\start.xml 导入指定的备份文件 1import-startlayout -layoutpath d:\\documents\\start\\start.xml -mountpath c:","tags":[{"name":"Windows","slug":"Windows","permalink":"http://OHLIA.github.io/Wiki-site/tags/Windows/"},{"name":"开始菜单","slug":"开始菜单","permalink":"http://OHLIA.github.io/Wiki-site/tags/开始菜单/"},{"name":"备份","slug":"备份","permalink":"http://OHLIA.github.io/Wiki-site/tags/备份/"},{"name":"恢复","slug":"恢复","permalink":"http://OHLIA.github.io/Wiki-site/tags/恢复/"}],"categories":[{"name":"Windows","slug":"Windows","permalink":"http://OHLIA.github.io/Wiki-site/categories/Windows/"}]},{"title":"Ubuntu 16.04 设置 root 账号登录","date":"2018-04-02T19:30:49.000Z","path":"wiki/Linux/ubuntu-16.04-root/","text":"设置root密码 更改配置文件 12345678910111213141516171819202122232425262728##STEP1##setting root password:$ sudo passwd root##STEP2##Edit$ sudo gedit /etc/lightdm/lightdm.conf############[Seat:*]autologin-user=root##############STEP3##If Prompt Error found$ gedit /root/.profile#############用#注释mesg n#添加tty -s &amp;&amp; mesg n # change’mesg n’ to‘tty –s &amp;&amp; mesg n’##############STEP4##If Audio no function$ gedit /root/.profile#############添加pulseaudio --start --log-target=syslog############","tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://OHLIA.github.io/Wiki-site/tags/Ubuntu/"},{"name":"root","slug":"root","permalink":"http://OHLIA.github.io/Wiki-site/tags/root/"},{"name":"教程","slug":"教程","permalink":"http://OHLIA.github.io/Wiki-site/tags/教程/"}],"categories":[{"name":"Linux","slug":"Linux","permalink":"http://OHLIA.github.io/Wiki-site/categories/Linux/"}]},{"title":"Windows 镜像文件大于 4G 的安装方法","date":"2018-03-16T21:53:24.000Z","path":"wiki/Windows/install-windows-with-wim-size-larger-than-4g/","text":"当前 BIOS 比较通用的启动分区为 FAT32 格式，随着系统的迭代，导致系统实际映像文件 /source/install.wim 大于 4G，受限于 FAT32 磁盘格式，无法放入大于 4G 的文件，此时需要一些解决方法。 使用 Dism 命令对 WIM 映像文件进行分卷Windows安装程序原生支持此法，故推荐。 用管理员权限运行 CMD 或者 Power shell ，输入如下命令： 1Dism /Split-Image /ImageFile:X:\\source\\install.wim /SWMFile:Y:\\source\\install.swm /FileSize:xxxx X:\\source\\install.wim表示来源路径和文件 Y:\\source\\install.swm表示卷后的路径和文件，后缀名swm FileSize:xxxx，XXXX请替换成小于4096的数值，单位为MB，表示单个分卷文件大小，分卷完成后，即可把生成的文件拷贝至启动盘的 \\source路径下。 其他方法 PXE 网络安装 使用光驱安装 在 Win PE 下安装，即制作 PE 维护盘，从 PE 里面加载镜像安装系统 启动盘使用 NTFS 分区格式 目前仅部分主板支持 可用 Rufus 制作启动盘提高兼容性，原理是增加一个小分区，放入 NTFS 的驱动，达到启动目的，但仍有部分主板不支持 自行对启动盘双分区： 第一个分区为 NTFS 或者 ExFat 分区格式，并且解压放入 ISO 所有文件 第二个分区为 Fat32 分区格式，放入启动所需文件： BOOT文件夹，里面放入boot.sdi文件 EFI文件夹，ISO对应的所有文件 Source文件夹，放入 boot.wim 文件 1234567/boot|--boot.sdi/EFI|--/boot|--/microsoft/source|--boot.wim U盘量产成光驱模式","tags":[{"name":"教程","slug":"教程","permalink":"http://OHLIA.github.io/Wiki-site/tags/教程/"},{"name":"Windows","slug":"Windows","permalink":"http://OHLIA.github.io/Wiki-site/tags/Windows/"},{"name":"Learn","slug":"Learn","permalink":"http://OHLIA.github.io/Wiki-site/tags/Learn/"}],"categories":[{"name":"Windows","slug":"Windows","permalink":"http://OHLIA.github.io/Wiki-site/categories/Windows/"}]},{"title":"安装 Windows 系统","date":"2018-03-15T22:01:13.000Z","path":"wiki/Windows/install-windows/","text":"下载系统镜像 从 MSDN, I tell you 下载需要的 ISO 文件，下载后比对 hash 值，确保无篡改。 启动盘工具 Rufus 同样提供下载镜像功能。 制作启动盘 现今主流为 UEFI mode 启动，比较旧的主板可能只支持 Legacy mode 启动，从EFI Firmware 2.5 开始只支持UEFI，彻底抛弃 Legacy（并不绝对，看厂商和客户需求）。 一般启动盘都是格式化成 FAT32，不能存储单个大于 4G 的文件，需要其它方法解决。 Legacy mode Windows CMD 创建。 软碟通往 U 盘或者移动硬盘写入镜像来制作可启动设备，非免费软件。 Rufus，开源免费的多功能启动盘制作工具，推荐。 Bootice，如果不想格式化移动存储设备，可以使用此软件写入 主引导记录，分区引导记录，然后把镜像文件全部解压到U盘或者移动硬盘。 UEFI mode 把镜像文件直接全部解压到U盘或者移动硬盘第一分区根目录即可，并不需要第三方工具。 安装 开机按快捷键（看厂商定义）进入BIOS（实际现在都是 UEFI firmware ） 点选自定义，全新安装 硬盘分区，如果是全新硬盘，点选新建，程序会自动建立 4 个分区 选择第四个分区安装系统 安装完成后，设置用户名和密码 激活合法途径： 官网购买授权。 从 Windows7/8/8.1 升级。 非法途径： 数字权利激活 VOL，即零售版可以使用 KMS 激活。 可用 KMSpico 软件本地激活 也可网络KMS服务器激活，如 https://03k.org/kms.html ，直接两条命令无脑激活即可 123#用管理员权限运行CMD或者Power shellslmgr /skms kms.03k.orgslmgr /ato 安装驱动 Windows10 update 会联网下载更新一些驱动，比如：CPU 核显驱动 如果是品牌机，请务必到官网下载驱动 如果是组装机，可能需要驱动助手类软件，不推荐国产的各种驱动人生/精灵等，避免被捆绑安装，推荐使用 Driver Booster 5 ，免费版足够使用。 该软件公司疑似中国公司。","tags":[{"name":"教程","slug":"教程","permalink":"http://OHLIA.github.io/Wiki-site/tags/教程/"},{"name":"Windows","slug":"Windows","permalink":"http://OHLIA.github.io/Wiki-site/tags/Windows/"},{"name":"系统","slug":"系统","permalink":"http://OHLIA.github.io/Wiki-site/tags/系统/"}],"categories":[{"name":"Windows","slug":"Windows","permalink":"http://OHLIA.github.io/Wiki-site/categories/Windows/"}]},{"title":"使用 Hexo 搭建博客","date":"2018-03-04T11:58:16.000Z","path":"wiki/Hexo/build-blog-by-hexo/","text":"使用Hexo搭建博客[TOC] 安装GIT Windows：下载并安装 git. Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。 Linux (Ubuntu, Debian)：sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core Linux (Arch 系列)：sudo pacman -S git Node.js 下载 安装程序 来安装。 HEXO1$ npm install -g hexo-cli 配置建立网站创建博客文件夹 1mkdir &lt;blog_name&gt; 在此文件夹初始化 1hexo init &lt;blog_name&gt; ### 配置 Hexo 网站 12345678# Sitetitle: subtitle: description: keywords:author: language: timezone: 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 keywords 网站关键词 author 作者名字 language 网站使用的语言 timezone 网站时区：详见时区列表 URL123456# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: root: permalink: :year/:month/:day/:title/permalink_defaults: 参数 描述 url 网址 root 网站根目录 permalink 文章的永久链接格式 permalink_defaults 永久链接中各部分的默认值 提醒 如果你的网站在子目录中，如：https://yoursite.com/blog ，就把你的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 不设置 URL，会回报以下错误 $ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s FATAL Cannot read property ‘replace’ of null TypeError: Cannot read property ‘replace’ of null 目录 123456789# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render: README.md 参数 描述 source_dir 资源文件夹 public_dir 公共文件夹 tag_dir 标签文件夹 archive_dir 归档文件夹 category_dir 分类文件夹 code_dir Include code 文件夹 i18n_dir 国际化文件夹 skip_render 跳过文件的渲染 文章 123456789101112131415# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: truerelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: 参数 描述 new_post_name 新文章的文件名称 default_layout 预设布局 auto_spacing 在中文和英文之间加入空格 titlecase 把标题转换为 title case external_link 在新标签中打开链接 filename_case 把文件名称转换为 (1) 小写或 (2) 大写 render_drafts 显示草稿 post_asset_folder 启动 Asset 文件夹 relative_link 把链接改为与根目录的相对位址 future 显示未来的文章 highlight 代码块的设置 部署12345# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: repo: 基本功能1234567#打开 Git bash#清除生成的网页文件hexo clean#生成网页文件hexo g#上次网页文件到 Github pagehexo d 常用页面添加 新增一个 404 页面：hexo new page 404 新增一个 about 页面：hexo new page about 新增一个分类页面：hexo new page categories 新增一个 tag 标签云页面：hexo new page tags 在 source/tags/index.md 编辑: 12345---title: tagsdate: 2018-03-05 11:11:11type: \"tags\"--- 插件使用插件官网：https://hexo.io/plugins/ 基本命令 安装插件：npm install 插件名 --save 卸载插件：npm uninstall 插件名 --save 更新插件和博客框架（需要在 hexo 目录下）： 1npm update 实质是通过根目录下 package.json 文件更新各大组件 必备插件 支持RSS：npm install hexo-generator-feed --save 文章加密：npm install hexo-blog-encrypt 本地搜索支持，需要主题有对应的设置：npm install hexo-generator-search --save TOC设置npm install hexo-renderer-markdown-it-plus HTML 压缩：npm install hexo-html-minifier --save JavaScript 压缩：npm install hexo-uglify --save CSS 压缩插件：npm install hexo-clean-css --save 图片懒加载法案一：npm install hexo-lazyload-image --save 选择性 SEO优化：npm install hexo-generator-seo-friendly-sitemap --save 生成站点地图：npm install hexo-generator-sitemap --save 生成百度站点地图：npm install hexo-generator-baidu-sitemap --save 图片懒加载方案二：npm install hexo-renderer-marked-lazy --save 可能会导致无法显示外链图片 功能实现版权声明打开 Next 主题目录下的 _config.yml 文件，post_copyright 设置 enable: true。 打赏功能 打开 Next 主题目录下的 _config.yml 文件，设置如下： 12345# Rewardreward_comment: Donate comment herewechatpay: /images/wechatpay.jpgalipay: /images/alipay.jpgbitcoin: /images/bitcoin.png 将二维码图片放置在主题目录下的 .\\source\\images目录下。 RSS订阅在 hexo 的 _config.yml 添加： 12345678910#RSS 订阅插件plugin:- hexo-generator-feed#RSS 插件配置feed: type: rss2 path: atom.xml #atom.xml或者rss.xml，放根目录下 limit: 20 hub: content: true 目录功能参考文章 安装hexo-renderer-markdown-it-plus 12npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it-plus --save 站点配置文件_config.yml 12345678910markdown_it_plus: highlight: true html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: “”‘’ pre_class: highlight 在文档任意位置输入：@[TOC]，即可生成目录和锚点 图片懒加载安装 Hexo-lazyload-image 插件 修改 _config.yml 文件，设置懒加载用图 1234lazyload: enable: true onlypost: false loadingImg: # eg. ./images/loading.png 本地搜索安装 hexo-generator-search 插件 站点 _config.yml 添加: 123search: path: search.xml field: post path - file path. By default is search.xml . If the file extension is .json, the output format will be JSON. Otherwise XML format file will be exported. field - the search scope you want to search, you can chose: post (Default) - will only covers all the posts of your blog. 只索引文章(post) page - will only covers all the pages of your blog. 只索引页面 all - will covers all the posts and pages of your blog. 全部索引 在线管理无法直接在 Github pages 等托管中工作，需要搭配服务器使用 安装 hexo-admin 插件 在 hexo 的 _config.yml 添加 1234admin: username: myfavoritename #登录名 password_hash: xxxxx #密码对应的md5 hash值 secret: a secret something #用于保证cookie安全 域名/admin，进入后台 本地文件夹用于插入本地图片/音乐/视频 配置文件_config.yml 的post_asset_folder设置为true Hexo 目录下执行npm install hexo-asset-link --save 再运行hexo n &quot;xxxx&quot;来生成md文件时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹，用来放入图片 插入图片格式： 12![Alt Text](./2019-02-14-Test-Post/Test-Image.png \"Title Text\")![Alt Text](2019-02-14-Test-Post/Test-Image.png \"Title Text\") 1&lt;img src=\"图片所在目录/图片名.jpg\" /&gt; 点击特效点击红心特效： 在/themes/next/source/js/src下新建文件 clicklove.js ，接着把该链接下的代码拷贝粘贴到 clicklove.js 文件中。 1!function(e,t,a)&#123;function n()&#123;c(\".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;\"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)&#125;function o()&#123;var t=\"function\"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(\"div\");a.className=\"heart\",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(\"style\");a.type=\"text/css\";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(\"head\")[0].appendChild(a)&#125;function s()&#123;return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 在\\themes\\next\\layout\\_layout.swig文件末尾添加： 12\\&lt;!-- 页面点击小红心 --&gt;&lt;script type=\"text/javascript\" src=\"/js/src/clicklove.js\"&gt;&lt;/script&gt; 插入多媒体 插入视频 同网易云音乐，生成iframe类型外链播放器来引用。 插入音乐 网易云音乐网页端，生成外链播放器，将代码复制到博文任意位置 12#本文的范例&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=1859310&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt; 插入图片 博文中引用外链图片 ![标题，可选](图片链接) Gitment评论系统Hexo-Next 添加 Gitment 评论系统 Hexo博客Next主题添加Gitment评论系统坑点 Live2D 模型hexo-helper-live2d 安装插件 npm install --save hexo-helper-live2d 安装模型 npm install live2d-widget-model-hijiki 配置 12345678910111213141516live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-hijiki display: position: right width: 150 height: 300 mobile: show: false 补充 live2D 模型预览 文章摘要 正文使用 &lt;!--more--&gt;截断，首页摘要只显示该标记之前的内容，包括图片。 YAML 添加 photos 属性，用于摘要显示图片。 12345678---title: date: tags: categories: photos: - &quot;https://xxx.jpg&quot;--- PDF 插件 安装npm install --save hexo-pdf 12345678安装npm install --save hexo-pdf使用网络引用：&#123;% pdf http://xxx.pdf %&#125;本地文件夹：&#123;% pdf test.pdf %&#125; HTML5 音乐播放器 aplayer项目地址 12345678#安装npm install hexo-tag-aplayer --save#需要音乐的地方插入&#123;% aplayer \"歌曲名称\" \"作者\" \"音乐_url\" \"封面图片_url\" \"autoplay\" %&#125;#本地文件夹开启情况下&#123;% aplayer \"Black Flies\" \"Ben Howard\" \"Black Flies - Ben Howard.mp3\" \"http://p1.music.126.net/GIM5l9xNmtudCJ72afnzeQ==/18494885093016151.jpg\" %&#125; HTML5 视频播放器 dplayer项目地址 12345678910#安装npm install hexo-tag-dplayer --save#插入视频#网络地址&#123;% dplayer \"url=http://home.ustc.edu.cn/~mmmwhy/GEM.mp4\" \"pic=http://home.ustc.edu.cn/~mmmwhy/GEM.jpg\" \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=tokendemo\" %&#125;#本地文件夹功能开启情况下&#123;% dplayer \"url=广州沙面.20190405.540P.简化.mp4\" \"pic=广州沙面.20190405.540P.简化.png\" \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=tokendemo\" %&#125; 我的博客网站 Theme: Next Tags Categories RSS 本地搜索文章 hexo-admin 后台管理 文章功能 TOC设置 加密模块 图片懒加载（非必要不安装） 本地图片 Aplayer 本地多媒体播放 其他 SNS: Github, E-mail 公益404 Donate Gitment评论系统 点击红心特效 参考链接Easy Hexo 使用 Github 空间搭建 Hexo 技术博客 Hexo-lazyload-image图片懒加载 使用Encrypt插件给Hexo博客文章加密 hexo之加密插件hexo-blog-encrypt Hexo 主题 —— NexT 设置 Hexo Next如何在文章摘要展示图片 如何为 Hexo 博文加入图片 Hexo博客yilia主题首页添加helper-live2d模型插件 GitHub中Hexo next主题下搭建的博客中增加PDF插件","tags":[{"name":"Note","slug":"Note","permalink":"http://OHLIA.github.io/Wiki-site/tags/Note/"},{"name":"Hexo","slug":"Hexo","permalink":"http://OHLIA.github.io/Wiki-site/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"http://OHLIA.github.io/Wiki-site/tags/Blog/"}],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://OHLIA.github.io/Wiki-site/categories/Hexo/"}]},{"title":"测试用页2","date":"1999-01-01T00:00:00.000Z","path":"wiki/Test/测试用页2/","text":"[TOC] @[TOC] 参考资料","tags":[],"categories":[{"name":"Test","slug":"Test","permalink":"http://OHLIA.github.io/Wiki-site/categories/Test/"}]},{"title":"测试用页","date":"1999-01-01T00:00:00.000Z","path":"wiki/Test/测试用页/","text":"表格 表头 表头2 表头3 1 4 7 2 5 8 3 6 9 -TOC12[TOC]@[TOC] 代码块iframe1&lt;iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"//music.163.com/outchain/player?type=2&amp;id=1859310&amp;auto=0&amp;height=32\"&gt;&lt;/iframe&gt; HTML12345678910111213141516171819202122232425262728293031323334&lt;!Doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"utf-8\" /&gt;&lt;title&gt;html5 image to base64&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=\"text/javascript\"&gt;window.onload = function()&#123; // 抓取上传图片，转换代码结果，显示图片的domvar img_upload=document.getElementById(\"img_upload\");var base64_code=document.getElementById(\"base64_code\");var img_area=document.getElementById(\"img_area\");// 添加功能出发监听事件img_upload.addEventListener('change',readFile,false);&#125;function readFile()&#123;var file=this.files[0];if(!/image\\/\\w+/.test(file.type))&#123; alert(\"请确保文件为图像类型\"); return false; &#125;var reader=new FileReader();reader.readAsDataURL(file);reader.onload=function()&#123;base64_code.innerHTML = this.result; img_area.innerHTML = '&lt;div&gt;图片img标签展示：&lt;/div&gt;&lt;img src=\"'+this.result+'\" alt=\"\"/&gt;'; &#125;&#125;&lt;/script&gt;&lt;input type=\"file\" id=\"img_upload\"/&gt;&lt;textarea id=\"base64_code\" rows=\"30\" cols=\"360\"&gt;&lt;/textarea&gt;&lt;p id=\"img_area\"&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; CSS123456789101112131415161718# Securityencrypt: enable: true # 开启为true，关闭为false default_abstract: 这是篇受保护的文章！#默认文章描述，可选 default_message: 请输入文章密码！#默认密码输入提示，可选 default_template: &lt;script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"&gt;&lt;/script&gt; &lt;div id=\"security\"&gt; &lt;div class=\"input-container\"&gt; &lt;input type=\"password\" class=\"form-control\" id=\"pass\" placeholder=\" &#123;&#123;message&#125;&#125; \" /&gt; &lt;label for=\"pass\"&gt; &#123;&#123;message&#125;&#125; &lt;/label&gt; &lt;div class=\"bottom-line\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=\"encrypt-blog\" style=\"display:none\"&gt; &#123;&#123;content&#125;&#125; &lt;/div&gt; #默认的文章详情页密码输入提示框，可选 插图1. 文档根目录 12![](哔哔小子.gif)![](./哔哔小子.gif) 2. 文章资源夹 资源夹根目录 12![](测试用页/伸出圆手.jpg &quot;测试用页/伸出圆手.jpg&quot;)![](./测试用页/伸出圆手.jpg &quot;./测试用页/伸出圆手.jpg&quot;) 资源夹子目录 1234![](测试用页/子目录/剪影.jpg &quot;测试用页/子目录/剪影.jpg&quot;)![](./测试用页/子目录/剪影.jpg &quot;./测试用页/子目录/剪影.jpg&quot;)![](测试用页/子目录/子子目录/三不.png &quot;测试用页/子目录/子子目录/三不.png&quot;)![](./测试用页/子目录/子子目录/三不.png &quot;./测试用页/子目录/子子目录/三不.png&quot;) 3. 网络用图12 多媒体 参考资料","tags":[],"categories":[{"name":"Test","slug":"Test","permalink":"http://OHLIA.github.io/Wiki-site/categories/Test/"}]},{"title":"Test for Travis-CI","date":"1999-01-01T00:00:00.000Z","path":"wiki/Test/Test-for-travis-ci/","text":"Test","tags":[],"categories":[{"name":"Test","slug":"Test","permalink":"http://OHLIA.github.io/Wiki-site/categories/Test/"}]},{"title":"Hello World","date":"1999-01-01T00:00:00.000Z","path":"wiki/Test/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[],"categories":[{"name":"Test","slug":"Test","permalink":"http://OHLIA.github.io/Wiki-site/categories/Test/"}]}]}